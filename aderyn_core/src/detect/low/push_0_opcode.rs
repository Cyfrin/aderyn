use std::{collections::BTreeMap, error::Error};

use crate::{
    ast::NodeID,
    capture,
    context::workspace::WorkspaceContext,
    detect::{
        detector::{IssueDetector, IssueDetectorNamePool, IssueSeverity},
        helpers::pragma_directive_to_semver,
    },
};
use eyre::Result;
use semver::{Op, VersionReq};
use solidity_ast::EvmVersion;

#[derive(Default)]
pub struct PushZeroOpcodeDetector {
    // Keys are: [0] source file name, [1] line number, [2] character location of node.
    // Do not add items manually, use `capture!` to add nodes to this BTreeMap.
    found_instances: BTreeMap<(String, usize, String), NodeID>,
}

fn version_req_allows_above_0_8_19(version_req: &VersionReq) -> bool {
    match version_req.comparators.len() {
        1 => {
            let comp = &version_req.comparators[0];
            match comp.op {
                Op::Tilde | Op::Caret => comp.major > 0 || comp.minor >= Some(8),
                Op::Greater | Op::GreaterEq => true,
                Op::Exact => comp.major == 0 && comp.minor == Some(8) && comp.patch == Some(20),
                _ => false,
            }
        }
        2 => {
            let comp = &version_req.comparators[1];
            match comp.op {
                Op::Less | Op::LessEq => {
                    comp.major > 0
                        || comp.minor > Some(8)
                        || (comp.minor == Some(8) && comp.patch >= Some(20))
                }
                _ => false,
            }
        }
        _ => false,
    }
}

impl IssueDetector for PushZeroOpcodeDetector {
    fn detect(&mut self, context: &WorkspaceContext) -> Result<bool, Box<dyn Error>> {
        if context.evm_version >= EvmVersion::Shanghai {
            for pragma_directive in context.pragma_directives() {
                let req = pragma_directive_to_semver(pragma_directive)?;
                if version_req_allows_above_0_8_19(&req) {
                    capture!(self, context, pragma_directive);
                }
            }
        }
        Ok(!self.found_instances.is_empty())
    }

    fn severity(&self) -> IssueSeverity {
        IssueSeverity::Low
    }

    fn title(&self) -> String {
        String::from("PUSH0 Opcode")
    }

    fn description(&self) -> String {
        String::from("Solc compiler version 0.8.20 switches the default target EVM version to Shanghai, which means that the generated bytecode will include PUSH0 opcodes. Be sure to select the appropriate EVM version in case you intend to deploy on a chain other than mainnet like L2 chains that may not support PUSH0, otherwise deployment of your contracts will fail.")
    }

    fn instances(&self) -> BTreeMap<(String, usize, String), NodeID> {
        self.found_instances.clone()
    }

    fn name(&self) -> String {
        format!("{}", IssueDetectorNamePool::PushZeroOpcode)
    }
}

#[cfg(test)]
mod unspecific_solidity_pragma_tests {

    use crate::detect::detector::IssueDetector;

    #[test]

    fn test_push_0_opcode_detector_on_0_8_20_by_loading_contract_directly() {
        let context = crate::detect::test_utils::load_solidity_source_unit(
            "../tests/contract-playground/src/inheritance/ExtendedInheritance.sol",
        );

        let mut detector = super::PushZeroOpcodeDetector::default();
        let found = detector.detect(&context).unwrap();
        // assert that it found something
        assert!(found);
        // assert that the number of instances is correct
        assert_eq!(detector.instances().len(), 1);
    }

    #[test]

    fn test_push_0_opcode_detector_on_range_by_loading_contract_directly() {
        let context = crate::detect::test_utils::load_solidity_source_unit(
            "../tests/contract-playground/src/CrazyPragma.sol",
        );

        let mut detector = super::PushZeroOpcodeDetector::default();
        let found = detector.detect(&context).unwrap();
        // assert that it found something
        assert!(found);
        // assert that the number of instances is correct
        assert_eq!(detector.instances().len(), 1);
    }

    #[test]

    fn test_push_0_opcode_detector_on_0_8_19_by_loading_contract_directly() {
        let context = crate::detect::test_utils::load_solidity_source_unit(
            "../tests/contract-playground/src/ArbitraryTransferFrom.sol",
        );

        let mut detector = super::PushZeroOpcodeDetector::default();
        let found = detector.detect(&context).unwrap();
        // assert that it found something
        assert!(!found);
        // assert that the number of instances is correct
        assert_eq!(detector.instances().len(), 0);
    }

    #[test]

    fn test_push_0_opcode_detector_on_caret_0_8_13_by_loading_contract_directly() {
        let context = crate::detect::test_utils::load_solidity_source_unit(
            "../tests/contract-playground/src/Counter.sol",
        );

        let mut detector = super::PushZeroOpcodeDetector::default();
        let found = detector.detect(&context).unwrap();
        // assert that it found something
        assert!(found);
        // assert that the number of instances is correct
        assert_eq!(detector.instances().len(), 1);
    }

    #[test]

    fn test_push_0_opcode_detector_on_greter_equal_0_8_0_by_loading_contract_directly() {
        let context = crate::detect::test_utils::load_solidity_source_unit(
            "../tests/contract-playground/src/inheritance/IContractInheritance.sol",
        );

        let mut detector = super::PushZeroOpcodeDetector::default();
        let found = detector.detect(&context).unwrap();
        // assert that it found something
        assert!(found);
        // assert that the number of instances is correct
        assert_eq!(detector.instances().len(), 1);
    }

    #[test]

    fn test_push_0_opcode_detector_on_pragma_range_by_loading_contract_directly() {
        let context = crate::detect::test_utils::load_solidity_source_unit(
            "../tests/contract-playground/src/PragmaRange.sol",
        );

        let mut detector = super::PushZeroOpcodeDetector::default();
        let found = detector.detect(&context).unwrap();
        // assert that it found nothing
        assert!(!found);
    }
}
