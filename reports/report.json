{
  "files_summary": {
    "total_source_units": 40,
    "total_sloc": 1260
  },
  "files_details": {
    "files_details": [
      {
        "file_path": "src/AbstractContract.sol",
        "n_sloc": 11
      },
      {
        "file_path": "src/AdminContract.sol",
        "n_sloc": 11
      },
      {
        "file_path": "src/ArbitraryTransferFrom.sol",
        "n_sloc": 37
      },
      {
        "file_path": "src/AssemblyExample.sol",
        "n_sloc": 9
      },
      {
        "file_path": "src/Casting.sol",
        "n_sloc": 126
      },
      {
        "file_path": "src/ConstantsLiterals.sol",
        "n_sloc": 28
      },
      {
        "file_path": "src/ContractWithTodo.sol",
        "n_sloc": 7
      },
      {
        "file_path": "src/Counter.sol",
        "n_sloc": 20
      },
      {
        "file_path": "src/CrazyPragma.sol",
        "n_sloc": 4
      },
      {
        "file_path": "src/DeprecatedOZFunctions.sol",
        "n_sloc": 32
      },
      {
        "file_path": "src/DivisionBeforeMultiplication.sol",
        "n_sloc": 22
      },
      {
        "file_path": "src/EmptyBlocks.sol",
        "n_sloc": 48
      },
      {
        "file_path": "src/HugeConstants.sol",
        "n_sloc": 36
      },
      {
        "file_path": "src/InconsistentUints.sol",
        "n_sloc": 17
      },
      {
        "file_path": "src/InternalFunctions.sol",
        "n_sloc": 22
      },
      {
        "file_path": "src/KeccakContract.sol",
        "n_sloc": 21
      },
      {
        "file_path": "src/OnceModifierExample.sol",
        "n_sloc": 8
      },
      {
        "file_path": "src/RevertsAndRequriesInLoops.sol",
        "n_sloc": 27
      },
      {
        "file_path": "src/StateVariables.sol",
        "n_sloc": 58
      },
      {
        "file_path": "src/StorageConditionals.sol",
        "n_sloc": 59
      },
      {
        "file_path": "src/T11sTranferer.sol",
        "n_sloc": 8
      },
      {
        "file_path": "src/UnprotectedInitialize.sol",
        "n_sloc": 25
      },
      {
        "file_path": "src/UnsafeERC721Mint.sol",
        "n_sloc": 18
      },
      {
        "file_path": "src/UnusedError.sol",
        "n_sloc": 19
      },
      {
        "file_path": "src/WrongOrderOfLayout.sol",
        "n_sloc": 13
      },
      {
        "file_path": "src/ZeroAddressCheck.sol",
        "n_sloc": 41
      },
      {
        "file_path": "src/auditor_mode/ExternalCalls.sol",
        "n_sloc": 65
      },
      {
        "file_path": "src/auditor_mode/PublicFunctionsWithoutSenderCheck.sol",
        "n_sloc": 45
      },
      {
        "file_path": "src/cloc/AnotherHeavilyCommentedContract.sol",
        "n_sloc": 32
      },
      {
        "file_path": "src/cloc/EmptyContractFile.sol",
        "n_sloc": 0
      },
      {
        "file_path": "src/cloc/HeavilyCommentedContract.sol",
        "n_sloc": 21
      },
      {
        "file_path": "src/eth2/DepositContract.sol",
        "n_sloc": 95
      },
      {
        "file_path": "src/inheritance/ExtendedInheritance.sol",
        "n_sloc": 17
      },
      {
        "file_path": "src/inheritance/IContractInheritance.sol",
        "n_sloc": 4
      },
      {
        "file_path": "src/inheritance/InheritanceBase.sol",
        "n_sloc": 8
      },
      {
        "file_path": "src/nested/1/Nested.sol",
        "n_sloc": 10
      },
      {
        "file_path": "src/nested/2/Nested.sol",
        "n_sloc": 7
      },
      {
        "file_path": "src/parent_chain/ParentChainContract.sol",
        "n_sloc": 29
      },
      {
        "file_path": "src/uniswap/UniswapV2Swapper.sol",
        "n_sloc": 50
      },
      {
        "file_path": "src/uniswap/UniswapV3Swapper.sol",
        "n_sloc": 150
      }
    ]
  },
  "issue_count": {
    "high": 6,
    "low": 23
  },
  "high_issues": {
    "issues": [
      {
        "title": "Using `delegatecall` in loop",
        "description": "When calling `delegatecall` the same `msg.value` amount will be accredited multiple times.",
        "detector_name": "delegate-call-in-loop",
        "instances": [
          {
            "contract_path": "src/inheritance/ExtendedInheritance.sol",
            "line_no": 16,
            "src": "488:19"
          }
        ]
      },
      {
        "title": "`abi.encodePacked()` should not be used with dynamic types when passing the result to a hash function such as `keccak256()`",
        "description": "Use `abi.encode()` instead which will pad items to 32 bytes, which will [prevent hash collisions](https://docs.soliditylang.org/en/v0.8.13/abi-spec.html#non-standard-packed-mode) (e.g. `abi.encodePacked(0x123,0x456)` => `0x123456` => `abi.encodePacked(0x1,0x23456)`, but `abi.encode(0x123,0x456)` => `0x0...1230...456`). Unless there is a compelling reason, `abi.encode` should be preferred. If there is only one argument to `abi.encodePacked()` it can often be cast to `bytes()` or `bytes32()` [instead](https://ethereum.stackexchange.com/questions/30912/how-to-compare-strings-in-solidity#answer-82739).\nIf all arguments are strings and or bytes, `bytes.concat()` should be used instead.",
        "detector_name": "avoid-abi-encode-packed",
        "instances": [
          {
            "contract_path": "src/KeccakContract.sol",
            "line_no": 18,
            "src": "587:16"
          },
          {
            "contract_path": "src/KeccakContract.sol",
            "line_no": 22,
            "src": "734:16"
          },
          {
            "contract_path": "src/KeccakContract.sol",
            "line_no": 26,
            "src": "887:16"
          }
        ]
      },
      {
        "title": "Using `block.timestamp` for swap deadline offers no protection",
        "description": "In the PoS model, proposers know well in advance if they will propose one or consecutive blocks ahead of time. In such a scenario, a malicious validator can hold back the transaction and execute it at a more favourable block number.Consider allowing function caller to specify swap deadline input parameter.",
        "detector_name": "block-timestamp-deadline",
        "instances": [
          {
            "contract_path": "src/uniswap/UniswapV2Swapper.sol",
            "line_no": 23,
            "src": "670:83"
          },
          {
            "contract_path": "src/uniswap/UniswapV2Swapper.sol",
            "line_no": 24,
            "src": "763:83"
          },
          {
            "contract_path": "src/uniswap/UniswapV2Swapper.sol",
            "line_no": 25,
            "src": "856:70"
          },
          {
            "contract_path": "src/uniswap/UniswapV2Swapper.sol",
            "line_no": 26,
            "src": "936:80"
          },
          {
            "contract_path": "src/uniswap/UniswapV2Swapper.sol",
            "line_no": 27,
            "src": "1026:80"
          },
          {
            "contract_path": "src/uniswap/UniswapV2Swapper.sol",
            "line_no": 28,
            "src": "1116:67"
          },
          {
            "contract_path": "src/uniswap/UniswapV2Swapper.sol",
            "line_no": 31,
            "src": "1261:112"
          },
          {
            "contract_path": "src/uniswap/UniswapV2Swapper.sol",
            "line_no": 32,
            "src": "1383:99"
          },
          {
            "contract_path": "src/uniswap/UniswapV2Swapper.sol",
            "line_no": 33,
            "src": "1492:109"
          },
          {
            "contract_path": "src/uniswap/UniswapV3Swapper.sol",
            "line_no": 52,
            "src": "1115:143"
          },
          {
            "contract_path": "src/uniswap/UniswapV3Swapper.sol",
            "line_no": 55,
            "src": "1293:321"
          },
          {
            "contract_path": "src/uniswap/UniswapV3Swapper.sol",
            "line_no": 66,
            "src": "1668:131"
          },
          {
            "contract_path": "src/uniswap/UniswapV3Swapper.sol",
            "line_no": 69,
            "src": "1828:236"
          },
          {
            "contract_path": "src/uniswap/UniswapV3Swapper.sol",
            "line_no": 77,
            "src": "2132:144"
          },
          {
            "contract_path": "src/uniswap/UniswapV3Swapper.sol",
            "line_no": 80,
            "src": "2312:322"
          },
          {
            "contract_path": "src/uniswap/UniswapV3Swapper.sol",
            "line_no": 91,
            "src": "2690:132"
          },
          {
            "contract_path": "src/uniswap/UniswapV3Swapper.sol",
            "line_no": 94,
            "src": "2852:237"
          }
        ]
      },
      {
        "title": "Arbitrary `from` passed to `transferFrom` (or `safeTransferFrom`)",
        "description": "Passing an arbitrary `from` address to `transferFrom` (or `safeTransferFrom`) can lead to loss of funds, because anyone can transfer tokens from the `from` address if an approval is made.  ",
        "detector_name": "arbitrary-transfer-from",
        "instances": [
          {
            "contract_path": "src/ArbitraryTransferFrom.sol",
            "line_no": 16,
            "src": "370:38"
          },
          {
            "contract_path": "src/ArbitraryTransferFrom.sol",
            "line_no": 20,
            "src": "496:42"
          },
          {
            "contract_path": "src/ArbitraryTransferFrom.sol",
            "line_no": 24,
            "src": "634:53"
          },
          {
            "contract_path": "src/ArbitraryTransferFrom.sol",
            "line_no": 30,
            "src": "864:44"
          },
          {
            "contract_path": "src/DeprecatedOZFunctions.sol",
            "line_no": 17,
            "src": "579:39"
          },
          {
            "contract_path": "src/DeprecatedOZFunctions.sol",
            "line_no": 47,
            "src": "1598:35"
          }
        ]
      },
      {
        "title": "Unprotected initializer",
        "description": "Consider protecting the initializer functions with modifiers.",
        "detector_name": "unprotected-initializer",
        "instances": [
          {
            "contract_path": "src/UnprotectedInitialize.sol",
            "line_no": 35,
            "src": "820:33"
          }
        ]
      },
      {
        "title": "Unsafe Casting",
        "description": "Downcasting int/uints in Solidity can be unsafe due to the potential for data loss and unintended behavior.When downcasting a larger integer type to a smaller one (e.g., uint256 to uint128), the value may exceed the range of the target type,leading to truncation and loss of significant digits. Use OpenZeppelin's SafeCast library to safely downcast integers.",
        "detector_name": "unsafe-casting-detector",
        "instances": [
          {
            "contract_path": "src/Casting.sol",
            "line_no": 35,
            "src": "1065:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 36,
            "src": "1097:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 37,
            "src": "1129:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 38,
            "src": "1161:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 39,
            "src": "1193:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 40,
            "src": "1225:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 41,
            "src": "1257:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 42,
            "src": "1289:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 43,
            "src": "1321:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 44,
            "src": "1353:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 45,
            "src": "1385:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 46,
            "src": "1417:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 47,
            "src": "1449:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 48,
            "src": "1481:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 49,
            "src": "1513:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 50,
            "src": "1545:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 51,
            "src": "1577:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 52,
            "src": "1609:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 53,
            "src": "1641:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 54,
            "src": "1672:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 55,
            "src": "1702:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 56,
            "src": "1732:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 57,
            "src": "1762:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 58,
            "src": "1792:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 59,
            "src": "1822:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 60,
            "src": "1853:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 61,
            "src": "1884:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 62,
            "src": "1916:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 63,
            "src": "1948:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 64,
            "src": "1980:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 65,
            "src": "2013:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 73,
            "src": "2242:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 74,
            "src": "2272:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 75,
            "src": "2302:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 76,
            "src": "2332:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 77,
            "src": "2362:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 78,
            "src": "2392:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 79,
            "src": "2422:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 80,
            "src": "2452:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 81,
            "src": "2482:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 82,
            "src": "2512:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 83,
            "src": "2542:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 84,
            "src": "2572:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 85,
            "src": "2602:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 86,
            "src": "2632:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 87,
            "src": "2662:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 88,
            "src": "2692:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 89,
            "src": "2722:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 90,
            "src": "2752:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 91,
            "src": "2782:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 92,
            "src": "2811:8"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 93,
            "src": "2839:8"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 94,
            "src": "2867:8"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 95,
            "src": "2895:8"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 96,
            "src": "2923:8"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 97,
            "src": "2951:8"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 98,
            "src": "2980:8"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 99,
            "src": "3009:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 100,
            "src": "3039:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 101,
            "src": "3069:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 102,
            "src": "3099:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 103,
            "src": "3130:8"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 111,
            "src": "3426:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 112,
            "src": "3458:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 113,
            "src": "3490:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 114,
            "src": "3522:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 115,
            "src": "3554:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 116,
            "src": "3586:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 117,
            "src": "3618:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 118,
            "src": "3650:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 119,
            "src": "3682:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 120,
            "src": "3714:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 121,
            "src": "3746:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 122,
            "src": "3778:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 123,
            "src": "3810:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 124,
            "src": "3842:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 125,
            "src": "3874:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 126,
            "src": "3906:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 127,
            "src": "3938:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 128,
            "src": "3970:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 129,
            "src": "4002:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 130,
            "src": "4034:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 131,
            "src": "4066:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 132,
            "src": "4098:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 133,
            "src": "4129:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 134,
            "src": "4159:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 135,
            "src": "4189:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 136,
            "src": "4220:9"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 137,
            "src": "4251:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 138,
            "src": "4283:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 139,
            "src": "4315:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 140,
            "src": "4347:10"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 141,
            "src": "4381:10"
          }
        ]
      }
    ]
  },
  "low_issues": {
    "issues": [
      {
        "title": "Centralization Risk for trusted owners",
        "description": "Contracts have owners with privileged rights to perform admin tasks and need to be trusted to not perform malicious updates or drain funds.",
        "detector_name": "centralization-risk",
        "instances": [
          {
            "contract_path": "src/AdminContract.sol",
            "line_no": 7,
            "src": "270:7"
          },
          {
            "contract_path": "src/AdminContract.sol",
            "line_no": 10,
            "src": "376:9"
          },
          {
            "contract_path": "src/AdminContract.sol",
            "line_no": 14,
            "src": "505:9"
          },
          {
            "contract_path": "src/DeprecatedOZFunctions.sol",
            "line_no": 7,
            "src": "295:13"
          },
          {
            "contract_path": "src/EmptyBlocks.sol",
            "line_no": 6,
            "src": "188:7"
          },
          {
            "contract_path": "src/InternalFunctions.sol",
            "line_no": 12,
            "src": "250:9"
          },
          {
            "contract_path": "src/auditor_mode/PublicFunctionsWithoutSenderCheck.sol",
            "line_no": 9,
            "src": "322:7"
          },
          {
            "contract_path": "src/auditor_mode/PublicFunctionsWithoutSenderCheck.sol",
            "line_no": 11,
            "src": "396:9"
          },
          {
            "contract_path": "src/auditor_mode/PublicFunctionsWithoutSenderCheck.sol",
            "line_no": 35,
            "src": "975:13"
          },
          {
            "contract_path": "src/auditor_mode/PublicFunctionsWithoutSenderCheck.sol",
            "line_no": 38,
            "src": "1108:14"
          },
          {
            "contract_path": "src/parent_chain/ParentChainContract.sol",
            "line_no": 7,
            "src": "282:7"
          },
          {
            "contract_path": "src/parent_chain/ParentChainContract.sol",
            "line_no": 28,
            "src": "725:9"
          },
          {
            "contract_path": "src/parent_chain/ParentChainContract.sol",
            "line_no": 32,
            "src": "854:9"
          }
        ]
      },
      {
        "title": "Solmate's SafeTransferLib does not check for token contract's existence",
        "description": "There is a subtle difference between the implementation of solmate's SafeTransferLib and OZ's SafeERC20: OZ's SafeERC20 checks if the token is a contract or not, solmate's SafeTransferLib does not.\nhttps://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol#L9 \n`@dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller`\n",
        "detector_name": "solmate-safe-transfer-lib",
        "instances": [
          {
            "contract_path": "src/T11sTranferer.sol",
            "line_no": 4,
            "src": "57:84"
          }
        ]
      },
      {
        "title": "`ecrecover` is susceptible to signature malleability",
        "description": "The `ecrecover` function is susceptible to signature malleability. This means that the same message can be signed in multiple ways, allowing an attacker to change the message signature without invalidating it. This can lead to unexpected behavior in smart contracts, such as the loss of funds or the ability to bypass access control. Consider using OpenZeppelin's ECDSA library instead of the built-in function.",
        "detector_name": "ecrecover",
        "instances": [
          {
            "contract_path": "src/inheritance/ExtendedInheritance.sol",
            "line_no": 21,
            "src": "705:9"
          }
        ]
      },
      {
        "title": "Deprecated OpenZeppelin functions should not be used",
        "description": "Openzeppelin has deprecated several functions and replaced with newer versions. Please consult https://docs.openzeppelin.com/",
        "detector_name": "deprecated-oz-functions",
        "instances": [
          {
            "contract_path": "src/DeprecatedOZFunctions.sol",
            "line_no": 22,
            "src": "737:10"
          },
          {
            "contract_path": "src/DeprecatedOZFunctions.sol",
            "line_no": 27,
            "src": "898:17"
          }
        ]
      },
      {
        "title": "Unsafe ERC20 Operations should not be used",
        "description": "ERC20 functions may not behave as expected. For example: return values are not always meaningful. It is recommended to use OpenZeppelin's SafeERC20 library.",
        "detector_name": "unsafe-erc20-functions",
        "instances": [
          {
            "contract_path": "src/ArbitraryTransferFrom.sol",
            "line_no": 16,
            "src": "370:20"
          },
          {
            "contract_path": "src/ArbitraryTransferFrom.sol",
            "line_no": 30,
            "src": "864:20"
          },
          {
            "contract_path": "src/ArbitraryTransferFrom.sol",
            "line_no": 50,
            "src": "1517:20"
          },
          {
            "contract_path": "src/DeprecatedOZFunctions.sol",
            "line_no": 32,
            "src": "1062:13"
          },
          {
            "contract_path": "src/DeprecatedOZFunctions.sol",
            "line_no": 37,
            "src": "1272:13"
          },
          {
            "contract_path": "src/DeprecatedOZFunctions.sol",
            "line_no": 38,
            "src": "1322:13"
          },
          {
            "contract_path": "src/DeprecatedOZFunctions.sol",
            "line_no": 42,
            "src": "1424:13"
          },
          {
            "contract_path": "src/DeprecatedOZFunctions.sol",
            "line_no": 47,
            "src": "1598:18"
          }
        ]
      },
      {
        "title": "Solidity pragma should be specific, not wide",
        "description": "Consider using a specific version of Solidity in your contracts instead of a wide version. For example, instead of `pragma solidity ^0.8.0;`, use `pragma solidity 0.8.0;`",
        "detector_name": "unspecific-solidity-pragma",
        "instances": [
          {
            "contract_path": "src/ContractWithTodo.sol",
            "line_no": 2,
            "src": "32:23"
          },
          {
            "contract_path": "src/Counter.sol",
            "line_no": 2,
            "src": "39:24"
          },
          {
            "contract_path": "src/CrazyPragma.sol",
            "line_no": 2,
            "src": "32:32"
          },
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 1,
            "src": "0:24"
          },
          {
            "contract_path": "src/cloc/AnotherHeavilyCommentedContract.sol",
            "line_no": 6,
            "src": "46:24"
          },
          {
            "contract_path": "src/cloc/HeavilyCommentedContract.sol",
            "line_no": 6,
            "src": "46:32"
          },
          {
            "contract_path": "src/inheritance/IContractInheritance.sol",
            "line_no": 2,
            "src": "32:24"
          },
          {
            "contract_path": "src/inheritance/InheritanceBase.sol",
            "line_no": 2,
            "src": "32:23"
          }
        ]
      },
      {
        "title": "Missing checks for `address(0)` when assigning values to address state variables",
        "description": "Check for `address(0)` when assigning values to address state variables.",
        "detector_name": "zero-address-check",
        "instances": [
          {
            "contract_path": "src/ArbitraryTransferFrom.sol",
            "line_no": 12,
            "src": "267:15"
          },
          {
            "contract_path": "src/StateVariables.sol",
            "line_no": 58,
            "src": "2121:14"
          },
          {
            "contract_path": "src/ZeroAddressCheck.sol",
            "line_no": 43,
            "src": "1171:14"
          },
          {
            "contract_path": "src/ZeroAddressCheck.sol",
            "line_no": 47,
            "src": "1248:16"
          },
          {
            "contract_path": "src/ZeroAddressCheck.sol",
            "line_no": 51,
            "src": "1327:23"
          },
          {
            "contract_path": "src/uniswap/UniswapV2Swapper.sol",
            "line_no": 11,
            "src": "365:17"
          }
        ]
      },
      {
        "title": "`public` functions not used internally could be marked `external`",
        "description": "Instead of marking a function as `public`, consider marking it as `external` if it is not used internally.",
        "detector_name": "useless-public-function",
        "instances": [
          {
            "contract_path": "src/ArbitraryTransferFrom.sol",
            "line_no": 28,
            "src": "772:5"
          },
          {
            "contract_path": "src/AssemblyExample.sol",
            "line_no": 6,
            "src": "113:1"
          },
          {
            "contract_path": "src/ContractWithTodo.sol",
            "line_no": 13,
            "src": "337:15"
          },
          {
            "contract_path": "src/Counter.sol",
            "line_no": 7,
            "src": "129:9"
          },
          {
            "contract_path": "src/StateVariables.sol",
            "line_no": 47,
            "src": "1764:18"
          },
          {
            "contract_path": "src/StateVariables.sol",
            "line_no": 52,
            "src": "1915:20"
          },
          {
            "contract_path": "src/StateVariables.sol",
            "line_no": 57,
            "src": "2072:14"
          },
          {
            "contract_path": "src/StateVariables.sol",
            "line_no": 61,
            "src": "2157:22"
          },
          {
            "contract_path": "src/StateVariables.sol",
            "line_no": 71,
            "src": "2539:25"
          },
          {
            "contract_path": "src/auditor_mode/PublicFunctionsWithoutSenderCheck.sol",
            "line_no": 16,
            "src": "475:27"
          },
          {
            "contract_path": "src/auditor_mode/PublicFunctionsWithoutSenderCheck.sol",
            "line_no": 22,
            "src": "653:28"
          },
          {
            "contract_path": "src/auditor_mode/PublicFunctionsWithoutSenderCheck.sol",
            "line_no": 45,
            "src": "1324:26"
          },
          {
            "contract_path": "src/auditor_mode/PublicFunctionsWithoutSenderCheck.sol",
            "line_no": 53,
            "src": "1637:27"
          },
          {
            "contract_path": "src/auditor_mode/PublicFunctionsWithoutSenderCheck.sol",
            "line_no": 71,
            "src": "2014:20"
          },
          {
            "contract_path": "src/auditor_mode/PublicFunctionsWithoutSenderCheck.sol",
            "line_no": 77,
            "src": "2183:28"
          },
          {
            "contract_path": "src/cloc/AnotherHeavilyCommentedContract.sol",
            "line_no": 31,
            "src": "500:3"
          },
          {
            "contract_path": "src/cloc/AnotherHeavilyCommentedContract.sol",
            "line_no": 38,
            "src": "637:5"
          },
          {
            "contract_path": "src/cloc/AnotherHeavilyCommentedContract.sol",
            "line_no": 42,
            "src": "738:4"
          },
          {
            "contract_path": "src/cloc/HeavilyCommentedContract.sol",
            "line_no": 31,
            "src": "509:3"
          },
          {
            "contract_path": "src/cloc/HeavilyCommentedContract.sol",
            "line_no": 38,
            "src": "646:4"
          },
          {
            "contract_path": "src/parent_chain/ParentChainContract.sol",
            "line_no": 11,
            "src": "355:9"
          },
          {
            "contract_path": "src/parent_chain/ParentChainContract.sol",
            "line_no": 15,
            "src": "422:9"
          }
        ]
      },
      {
        "title": "Define and use `constant` variables instead of using literals",
        "description": "If the same constant literal value is used multiple times, create a constant state variable and reference it throughout the contract.",
        "detector_name": "constants-instead-of-literals",
        "instances": [
          {
            "contract_path": "src/Casting.sol",
            "line_no": 16,
            "src": "483:18"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 22,
            "src": "646:18"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 31,
            "src": "921:18"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 69,
            "src": "2103:18"
          },
          {
            "contract_path": "src/ConstantsLiterals.sol",
            "line_no": 25,
            "src": "958:3"
          },
          {
            "contract_path": "src/ConstantsLiterals.sol",
            "line_no": 26,
            "src": "992:3"
          },
          {
            "contract_path": "src/ConstantsLiterals.sol",
            "line_no": 27,
            "src": "1032:4"
          },
          {
            "contract_path": "src/ConstantsLiterals.sol",
            "line_no": 28,
            "src": "1068:4"
          },
          {
            "contract_path": "src/ConstantsLiterals.sol",
            "line_no": 29,
            "src": "1117:42"
          },
          {
            "contract_path": "src/ConstantsLiterals.sol",
            "line_no": 30,
            "src": "1192:42"
          },
          {
            "contract_path": "src/ConstantsLiterals.sol",
            "line_no": 31,
            "src": "1275:66"
          },
          {
            "contract_path": "src/ConstantsLiterals.sol",
            "line_no": 32,
            "src": "1374:66"
          },
          {
            "contract_path": "src/RevertsAndRequriesInLoops.sol",
            "line_no": 10,
            "src": "253:2"
          },
          {
            "contract_path": "src/RevertsAndRequriesInLoops.sol",
            "line_no": 17,
            "src": "442:2"
          },
          {
            "contract_path": "src/RevertsAndRequriesInLoops.sol",
            "line_no": 26,
            "src": "706:2"
          },
          {
            "contract_path": "src/RevertsAndRequriesInLoops.sol",
            "line_no": 27,
            "src": "745:2"
          },
          {
            "contract_path": "src/eth2/DepositContract.sol",
            "line_no": 113,
            "src": "7252:2"
          },
          {
            "contract_path": "src/eth2/DepositContract.sol",
            "line_no": 113,
            "src": "7293:2"
          }
        ]
      },
      {
        "title": "Event is missing `indexed` fields",
        "description": "Index event fields make the field more quickly accessible to off-chain tools that parse events. However, note that each index field costs extra gas during emission, so it's not necessarily best to index the maximum allowed per event (three fields). Each event should use three indexed fields if there are three or more fields, and gas usage is not particularly of concern for the events in question. If there are fewer than three fields, all of the fields should be indexed.",
        "detector_name": "unindexed-events",
        "instances": [
          {
            "contract_path": "src/eth2/DepositContract.sol",
            "line_no": 19,
            "src": "2641:107"
          },
          {
            "contract_path": "src/inheritance/ExtendedInheritance.sol",
            "line_no": 7,
            "src": "144:45"
          },
          {
            "contract_path": "src/inheritance/InheritanceBase.sol",
            "line_no": 7,
            "src": "150:28"
          }
        ]
      },
      {
        "title": "Empty `require()` / `revert()` statements",
        "description": "Use descriptive reason strings or custom errors for revert paths.",
        "detector_name": "require-with-string",
        "instances": [
          {
            "contract_path": "src/DeprecatedOZFunctions.sol",
            "line_no": 37,
            "src": "1264:7"
          },
          {
            "contract_path": "src/DeprecatedOZFunctions.sol",
            "line_no": 40,
            "src": "1389:6"
          },
          {
            "contract_path": "src/RevertsAndRequriesInLoops.sol",
            "line_no": 19,
            "src": "503:6"
          },
          {
            "contract_path": "src/ZeroAddressCheck.sol",
            "line_no": 13,
            "src": "329:6"
          },
          {
            "contract_path": "src/ZeroAddressCheck.sol",
            "line_no": 23,
            "src": "608:6"
          },
          {
            "contract_path": "src/ZeroAddressCheck.sol",
            "line_no": 38,
            "src": "1074:6"
          },
          {
            "contract_path": "src/cloc/AnotherHeavilyCommentedContract.sol",
            "line_no": 35,
            "src": "589:7"
          },
          {
            "contract_path": "src/cloc/AnotherHeavilyCommentedContract.sol",
            "line_no": 56,
            "src": "1403:7"
          },
          {
            "contract_path": "src/cloc/HeavilyCommentedContract.sol",
            "line_no": 35,
            "src": "598:7"
          },
          {
            "contract_path": "src/cloc/HeavilyCommentedContract.sol",
            "line_no": 53,
            "src": "1408:7"
          }
        ]
      },
      {
        "title": "The `nonReentrant` `modifier` should occur before all other modifiers",
        "description": "This is a best-practice to protect against reentrancy in other modifiers.",
        "detector_name": "non-reentrant-before-others",
        "instances": [
          {
            "contract_path": "src/AdminContract.sol",
            "line_no": 10,
            "src": "386:12"
          },
          {
            "contract_path": "src/parent_chain/ParentChainContract.sol",
            "line_no": 28,
            "src": "735:12"
          }
        ]
      },
      {
        "title": "Using `ERC721::_mint()` can be dangerous",
        "description": "Using `ERC721::_mint()` can mint ERC721 tokens to addresses which don't support ERC721 tokens. Use `_safeMint()` instead of `_mint()` for ERC721.",
        "detector_name": "unsafe-oz-erc721-mint",
        "instances": [
          {
            "contract_path": "src/UnsafeERC721Mint.sol",
            "line_no": 12,
            "src": "410:5"
          }
        ]
      },
      {
        "title": "PUSH0 is not supported by all chains",
        "description": "Solc compiler version 0.8.20 switches the default target EVM version to Shanghai, which means that the generated bytecode will include PUSH0 opcodes. Be sure to select the appropriate EVM version in case you intend to deploy on a chain other than mainnet like L2 chains that may not support PUSH0, otherwise deployment of your contracts will fail.",
        "detector_name": "push-zero-opcode",
        "instances": [
          {
            "contract_path": "src/AdminContract.sol",
            "line_no": 2,
            "src": "32:23"
          },
          {
            "contract_path": "src/ContractWithTodo.sol",
            "line_no": 2,
            "src": "32:23"
          },
          {
            "contract_path": "src/Counter.sol",
            "line_no": 2,
            "src": "39:24"
          },
          {
            "contract_path": "src/CrazyPragma.sol",
            "line_no": 2,
            "src": "32:32"
          },
          {
            "contract_path": "src/DeprecatedOZFunctions.sol",
            "line_no": 2,
            "src": "32:23"
          },
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 1,
            "src": "0:24"
          },
          {
            "contract_path": "src/KeccakContract.sol",
            "line_no": 2,
            "src": "32:23"
          },
          {
            "contract_path": "src/StateVariables.sol",
            "line_no": 2,
            "src": "32:23"
          },
          {
            "contract_path": "src/StorageConditionals.sol",
            "line_no": 2,
            "src": "32:23"
          },
          {
            "contract_path": "src/T11sTranferer.sol",
            "line_no": 2,
            "src": "32:23"
          },
          {
            "contract_path": "src/UnsafeERC721Mint.sol",
            "line_no": 2,
            "src": "32:23"
          },
          {
            "contract_path": "src/cloc/AnotherHeavilyCommentedContract.sol",
            "line_no": 6,
            "src": "46:24"
          },
          {
            "contract_path": "src/cloc/HeavilyCommentedContract.sol",
            "line_no": 6,
            "src": "46:32"
          },
          {
            "contract_path": "src/eth2/DepositContract.sol",
            "line_no": 12,
            "src": "2302:23"
          },
          {
            "contract_path": "src/inheritance/ExtendedInheritance.sol",
            "line_no": 2,
            "src": "32:23"
          },
          {
            "contract_path": "src/inheritance/IContractInheritance.sol",
            "line_no": 2,
            "src": "32:24"
          },
          {
            "contract_path": "src/inheritance/InheritanceBase.sol",
            "line_no": 2,
            "src": "32:23"
          },
          {
            "contract_path": "src/nested/1/Nested.sol",
            "line_no": 5,
            "src": "180:23"
          },
          {
            "contract_path": "src/nested/2/Nested.sol",
            "line_no": 5,
            "src": "180:23"
          },
          {
            "contract_path": "src/parent_chain/ParentChainContract.sol",
            "line_no": 2,
            "src": "32:23"
          },
          {
            "contract_path": "src/uniswap/UniswapV2Swapper.sol",
            "line_no": 2,
            "src": "32:23"
          },
          {
            "contract_path": "src/uniswap/UniswapV3Swapper.sol",
            "line_no": 2,
            "src": "32:23"
          }
        ]
      },
      {
        "title": "Modifiers invoked only once can be shoe-horned into the function",
        "description": "",
        "detector_name": "useless-modifier",
        "instances": [
          {
            "contract_path": "src/InternalFunctions.sol",
            "line_no": 18,
            "src": "413:9"
          },
          {
            "contract_path": "src/OnceModifierExample.sol",
            "line_no": 6,
            "src": "103:8"
          },
          {
            "contract_path": "src/UnprotectedInitialize.sol",
            "line_no": 13,
            "src": "222:21"
          }
        ]
      },
      {
        "title": "Empty Block",
        "description": "Consider removing empty blocks.",
        "detector_name": "empty-block",
        "instances": [
          {
            "contract_path": "src/AdminContract.sol",
            "line_no": 14,
            "src": "457:23"
          },
          {
            "contract_path": "src/ContractWithTodo.sol",
            "line_no": 7,
            "src": "129:10"
          },
          {
            "contract_path": "src/ContractWithTodo.sol",
            "line_no": 13,
            "src": "337:15"
          },
          {
            "contract_path": "src/EmptyBlocks.sol",
            "line_no": 30,
            "src": "503:12"
          },
          {
            "contract_path": "src/EmptyBlocks.sol",
            "line_no": 38,
            "src": "599:12"
          },
          {
            "contract_path": "src/EmptyBlocks.sol",
            "line_no": 49,
            "src": "739:12"
          },
          {
            "contract_path": "src/EmptyBlocks.sol",
            "line_no": 63,
            "src": "888:13"
          },
          {
            "contract_path": "src/EmptyBlocks.sol",
            "line_no": 67,
            "src": "946:24"
          },
          {
            "contract_path": "src/EmptyBlocks.sol",
            "line_no": 73,
            "src": "1068:30"
          },
          {
            "contract_path": "src/EmptyBlocks.sol",
            "line_no": 81,
            "src": "1219:41"
          },
          {
            "contract_path": "src/OnceModifierExample.sol",
            "line_no": 10,
            "src": "147:7"
          },
          {
            "contract_path": "src/auditor_mode/PublicFunctionsWithoutSenderCheck.sol",
            "line_no": 11,
            "src": "367:17"
          },
          {
            "contract_path": "src/auditor_mode/PublicFunctionsWithoutSenderCheck.sol",
            "line_no": 30,
            "src": "852:25"
          },
          {
            "contract_path": "src/auditor_mode/PublicFunctionsWithoutSenderCheck.sol",
            "line_no": 38,
            "src": "1080:16"
          },
          {
            "contract_path": "src/auditor_mode/PublicFunctionsWithoutSenderCheck.sol",
            "line_no": 61,
            "src": "1840:17"
          },
          {
            "contract_path": "src/auditor_mode/PublicFunctionsWithoutSenderCheck.sol",
            "line_no": 85,
            "src": "2380:25"
          },
          {
            "contract_path": "src/parent_chain/ParentChainContract.sol",
            "line_no": 11,
            "src": "355:9"
          },
          {
            "contract_path": "src/parent_chain/ParentChainContract.sol",
            "line_no": 32,
            "src": "806:23"
          },
          {
            "contract_path": "src/parent_chain/ParentChainContract.sol",
            "line_no": 40,
            "src": "946:8"
          },
          {
            "contract_path": "src/parent_chain/ParentChainContract.sol",
            "line_no": 44,
            "src": "1011:23"
          }
        ]
      },
      {
        "title": "Large literal values multiples of 10000 can be replaced with scientific notation",
        "description": "Use `e` notation, for example: `1e18`, instead of its full numeric value.",
        "detector_name": "large-numeric-literal",
        "instances": [
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 6,
            "src": "182:24"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 7,
            "src": "252:23"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 8,
            "src": "321:22"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 9,
            "src": "389:21"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 10,
            "src": "456:20"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 11,
            "src": "522:19"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 12,
            "src": "587:18"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 13,
            "src": "651:17"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 14,
            "src": "714:16"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 15,
            "src": "777:15"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 16,
            "src": "839:14"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 17,
            "src": "900:13"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 18,
            "src": "960:12"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 19,
            "src": "1019:11"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 20,
            "src": "1077:10"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 21,
            "src": "1134:9"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 22,
            "src": "1190:8"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 23,
            "src": "1245:7"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 24,
            "src": "1299:6"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 25,
            "src": "1352:5"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 31,
            "src": "1585:29"
          },
          {
            "contract_path": "src/HugeConstants.sol",
            "line_no": 32,
            "src": "1673:6"
          }
        ]
      },
      {
        "title": "Internal functions called only once can be inlined",
        "description": "Instead of separating the logic into a separate function, consider inlining the logic into the calling function. This can reduce the number of function calls and improve readability.",
        "detector_name": "useless-internal-function",
        "instances": [
          {
            "contract_path": "src/InternalFunctions.sol",
            "line_no": 28,
            "src": "693:12"
          }
        ]
      },
      {
        "title": "Contract still has TODOs",
        "description": "Contract contains comments with TODOS",
        "detector_name": "contract-with-todos",
        "instances": [
          {
            "contract_path": "src/ContractWithTodo.sol",
            "line_no": 4,
            "src": "66:8"
          },
          {
            "contract_path": "src/Counter.sol",
            "line_no": 4,
            "src": "74:7"
          }
        ]
      },
      {
        "title": "Inconsistency in declaring uint256/uint (or) int256/int variables within a contract. Use explicit size declarations (uint256 or int256).",
        "description": "Consider keeping the naming convention consistent in a given contract. Explicit size declarations are preferred (uint256, int256) over implicit ones (uint, int) to avoid confusion.",
        "detector_name": "inconsistent-type-names",
        "instances": [
          {
            "contract_path": "src/Casting.sol",
            "line_no": 31,
            "src": "904:14"
          },
          {
            "contract_path": "src/Casting.sol",
            "line_no": 69,
            "src": "2086:13"
          },
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 5,
            "src": "122:12"
          },
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 7,
            "src": "197:11"
          },
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 11,
            "src": "289:10"
          },
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 12,
            "src": "340:9"
          },
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 15,
            "src": "383:9"
          },
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 16,
            "src": "434:10"
          },
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 19,
            "src": "528:12"
          },
          {
            "contract_path": "src/eth2/DepositContract.sol",
            "line_no": 59,
            "src": "4611:27"
          },
          {
            "contract_path": "src/eth2/DepositContract.sol",
            "line_no": 61,
            "src": "4732:17"
          },
          {
            "contract_path": "src/eth2/DepositContract.sol",
            "line_no": 70,
            "src": "5020:6"
          },
          {
            "contract_path": "src/eth2/DepositContract.sol",
            "line_no": 76,
            "src": "5307:4"
          },
          {
            "contract_path": "src/eth2/DepositContract.sol",
            "line_no": 77,
            "src": "5347:6"
          },
          {
            "contract_path": "src/eth2/DepositContract.sol",
            "line_no": 103,
            "src": "6636:14"
          },
          {
            "contract_path": "src/eth2/DepositContract.sol",
            "line_no": 133,
            "src": "8101:4"
          },
          {
            "contract_path": "src/eth2/DepositContract.sol",
            "line_no": 134,
            "src": "8141:6"
          }
        ]
      },
      {
        "title": "Unused Custom Error",
        "description": "it is recommended that the definition be removed when custom error is unused",
        "detector_name": "useless-error",
        "instances": [
          {
            "contract_path": "src/UnusedError.sol",
            "line_no": 5,
            "src": "84:27"
          },
          {
            "contract_path": "src/UnusedError.sol",
            "line_no": 13,
            "src": "258:36"
          },
          {
            "contract_path": "src/WrongOrderOfLayout.sol",
            "line_no": 13,
            "src": "274:21"
          }
        ]
      },
      {
        "title": "Loop contains `require`/`revert` statements",
        "description": "Avoid `require` / `revert` statements in a loop because a single bad item can cause the whole transaction to fail. It's better to forgive on fail and return failed elements post processing of the loop",
        "detector_name": "reverts-and-requires-in-loops",
        "instances": [
          {
            "contract_path": "src/RevertsAndRequriesInLoops.sol",
            "line_no": 10,
            "src": "227:129"
          },
          {
            "contract_path": "src/RevertsAndRequriesInLoops.sol",
            "line_no": 17,
            "src": "416:150"
          }
        ]
      },
      {
        "title": "Incorrect Order of Division and Multiplication",
        "description": "Division operations followed directly by multiplication operations can lead to precision loss due to the way integer arithmetic is handled in Solidity.",
        "detector_name": "division-before-multiplication",
        "instances": [
          {
            "contract_path": "src/DivisionBeforeMultiplication.sol",
            "line_no": 8,
            "src": "218:5"
          },
          {
            "contract_path": "src/DivisionBeforeMultiplication.sol",
            "line_no": 12,
            "src": "330:5"
          },
          {
            "contract_path": "src/DivisionBeforeMultiplication.sol",
            "line_no": 16,
            "src": "432:5"
          },
          {
            "contract_path": "src/DivisionBeforeMultiplication.sol",
            "line_no": 20,
            "src": "541:5"
          }
        ]
      }
    ]
  },
  "detectors_used": [
    "delegate-call-in-loop",
    "centralization-risk",
    "solmate-safe-transfer-lib",
    "avoid-abi-encode-packed",
    "ecrecover",
    "deprecated-oz-functions",
    "unsafe-erc20-functions",
    "unspecific-solidity-pragma",
    "zero-address-check",
    "useless-public-function",
    "constants-instead-of-literals",
    "unindexed-events",
    "require-with-string",
    "non-reentrant-before-others",
    "block-timestamp-deadline",
    "unsafe-oz-erc721-mint",
    "push-zero-opcode",
    "arbitrary-transfer-from",
    "useless-modifier",
    "empty-block",
    "large-numeric-literal",
    "useless-internal-function",
    "contract-with-todos",
    "inconsistent-type-names",
    "unprotected-initializer",
    "useless-error",
    "reverts-and-requires-in-loops",
    "division-before-multiplication",
    "unsafe-casting-detector"
  ]
}