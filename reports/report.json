{
  "files_summary": {
    "total_source_units": 19,
    "total_sloc": 294
  },
  "files_details": {
    "files_details": [
      {
        "file_path": "src/DangerousUnaryOperator.sol",
        "n_sloc": 13
      },
      {
        "file_path": "src/DynamicArrayLengthAssignment.sol",
        "n_sloc": 16
      },
      {
        "file_path": "src/ExperimentalEncoder.sol",
        "n_sloc": 4
      },
      {
        "file_path": "src/InconsistentUints.sol",
        "n_sloc": 17
      },
      {
        "file_path": "src/MisusedBoolean.sol",
        "n_sloc": 67
      },
      {
        "file_path": "src/MultipleConstructorSchemes.sol",
        "n_sloc": 10
      },
      {
        "file_path": "src/PreDeclaredVarUsage.sol",
        "n_sloc": 9
      },
      {
        "file_path": "src/PublicVariableReadInExternalContext.sol",
        "n_sloc": 32
      },
      {
        "file_path": "src/RTLO.sol",
        "n_sloc": 7
      },
      {
        "file_path": "src/RedundantStatements.sol",
        "n_sloc": 14
      },
      {
        "file_path": "src/StateShadowing.sol",
        "n_sloc": 17
      },
      {
        "file_path": "src/UncheckedSend.sol",
        "n_sloc": 18
      },
      {
        "file_path": "src/UsingSelfdestruct.sol",
        "n_sloc": 6
      },
      {
        "file_path": "src/cloc/AnotherHeavilyCommentedContract.sol",
        "n_sloc": 32
      },
      {
        "file_path": "src/cloc/EmptyContractFile.sol",
        "n_sloc": 0
      },
      {
        "file_path": "src/inheritance/IContractInheritance.sol",
        "n_sloc": 4
      },
      {
        "file_path": "src/inheritance/InheritanceBase.sol",
        "n_sloc": 8
      },
      {
        "file_path": "src/nested_mappings/LaterVersion.sol",
        "n_sloc": 10
      },
      {
        "file_path": "src/nested_mappings/NestedMappings.sol",
        "n_sloc": 10
      }
    ]
  },
  "issue_count": {
    "high": 13,
    "low": 14
  },
  "high_issues": {
    "issues": [
      {
        "title": "Experimental ABI Encoder",
        "description": "Experimental encoders should not be used in production. There are multiple known compiler bugs that are caused by the experimental encoder. Upgrade your solidity version to remove the need for experimental features.",
        "detector_name": "experimental-encoder",
        "instances": [
          {
            "contract_path": "src/ExperimentalEncoder.sol",
            "line_no": 2,
            "src": "23:33",
            "src_char": "23:33"
          }
        ]
      },
      {
        "title": "Contract Has Multiple Constructors",
        "description": "In some versions of Solidity, contracts compile with multiple constructors. The first constructor takes precedence. This can lead to unexpected behavior.",
        "detector_name": "multiple-constructors",
        "instances": [
          {
            "contract_path": "src/MultipleConstructorSchemes.sol",
            "line_no": 3,
            "src": "25:180",
            "src_char": "25:180"
          }
        ]
      },
      {
        "title": "Nested Structs in Mappings pre-0.5.0",
        "description": "Prior to updates in Solidity 0.5.0, public mappings with nested structs compiled, but produced incorrect values. Refrain from using these, or update to a more recent version of Solidity.",
        "detector_name": "nested-struct-in-mapping",
        "instances": [
          {
            "contract_path": "src/nested_mappings/NestedMappings.sol",
            "line_no": 17,
            "src": "367:58",
            "src_char": "367:58"
          }
        ]
      },
      {
        "title": "Depracated EVM Instruction for `selfdestruct` should not be used.",
        "description": "",
        "detector_name": "selfdestruct-identifier",
        "instances": [
          {
            "contract_path": "src/UsingSelfdestruct.sol",
            "line_no": 7,
            "src": "146:12",
            "src_char": "146:12"
          }
        ]
      },
      {
        "title": "Array length value has a direct assignment.",
        "description": "If the length of a dynamic array (storage variable) directly assigned to, it may allow access to other storage slots by tweaking it's value. This practice has been depracated in newer Solidity versions",
        "detector_name": "dynamic-array-length-assignment",
        "instances": [
          {
            "contract_path": "src/DynamicArrayLengthAssignment.sol",
            "line_no": 13,
            "src": "295:14",
            "src_char": "295:14"
          },
          {
            "contract_path": "src/DynamicArrayLengthAssignment.sol",
            "line_no": 14,
            "src": "325:18",
            "src_char": "325:18"
          },
          {
            "contract_path": "src/DynamicArrayLengthAssignment.sol",
            "line_no": 15,
            "src": "359:33",
            "src_char": "359:33"
          },
          {
            "contract_path": "src/DynamicArrayLengthAssignment.sol",
            "line_no": 16,
            "src": "408:15",
            "src_char": "408:15"
          },
          {
            "contract_path": "src/DynamicArrayLengthAssignment.sol",
            "line_no": 17,
            "src": "439:14",
            "src_char": "439:14"
          }
        ]
      },
      {
        "title": "Uninitialized State Variables",
        "description": "Solidity does initialize variables by default when you declare them, however it's good practice to explicitly declare an initial value. For example, if you transfer money to an address we must make sure that the address has been initialized.",
        "detector_name": "uninitialized-state-variable",
        "instances": [
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 7,
            "src": "197:11",
            "src_char": "197:11"
          },
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 8,
            "src": "233:14",
            "src_char": "233:14"
          },
          {
            "contract_path": "src/PublicVariableReadInExternalContext.sol",
            "line_no": 6,
            "src": "130:26",
            "src_char": "130:26"
          },
          {
            "contract_path": "src/StateShadowing.sol",
            "line_no": 5,
            "src": "87:13",
            "src_char": "87:13"
          }
        ]
      },
      {
        "title": "High Issue Title",
        "description": "Description of the high issue.",
        "detector_name": "state-variable-shadowing",
        "instances": [
          {
            "contract_path": "src/StateShadowing.sol",
            "line_no": 15,
            "src": "239:13",
            "src_char": "239:13"
          }
        ]
      },
      {
        "title": "Unchecked `bool success` value for send call.",
        "description": "The transaction `address(payable?).send(address)` may fail because of reasons like out-of-gas, invalid receipient address or revert from the recipient. Therefore, the boolean returned by this function call must be checked to be `true` in order to verify that the transaction was successful",
        "detector_name": "unchecked-send",
        "instances": [
          {
            "contract_path": "src/UncheckedSend.sol",
            "line_no": 24,
            "src": "815:22",
            "src_char": "815:22"
          }
        ]
      },
      {
        "title": "Misused boolean with logical operators",
        "description": "The patterns `if (â€¦ || true)` and `if (.. && false)` will always evaluate to true and false respectively.",
        "detector_name": "misused-boolean",
        "instances": [
          {
            "contract_path": "src/MisusedBoolean.sol",
            "line_no": 12,
            "src": "257:19",
            "src_char": "257:19"
          },
          {
            "contract_path": "src/MisusedBoolean.sol",
            "line_no": 19,
            "src": "419:20",
            "src_char": "419:20"
          },
          {
            "contract_path": "src/MisusedBoolean.sol",
            "line_no": 26,
            "src": "582:20",
            "src_char": "582:20"
          },
          {
            "contract_path": "src/MisusedBoolean.sol",
            "line_no": 33,
            "src": "745:19",
            "src_char": "745:19"
          },
          {
            "contract_path": "src/MisusedBoolean.sol",
            "line_no": 40,
            "src": "908:51",
            "src_char": "908:51"
          },
          {
            "contract_path": "src/MisusedBoolean.sol",
            "line_no": 47,
            "src": "1060:52",
            "src_char": "1060:52"
          },
          {
            "contract_path": "src/MisusedBoolean.sol",
            "line_no": 54,
            "src": "1213:53",
            "src_char": "1213:53"
          },
          {
            "contract_path": "src/MisusedBoolean.sol",
            "line_no": 61,
            "src": "1366:21",
            "src_char": "1366:21"
          },
          {
            "contract_path": "src/MisusedBoolean.sol",
            "line_no": 68,
            "src": "1530:17",
            "src_char": "1530:17"
          },
          {
            "contract_path": "src/MisusedBoolean.sol",
            "line_no": 75,
            "src": "1691:18",
            "src_char": "1691:18"
          }
        ]
      },
      {
        "title": "Sending native Eth is not protected from these functions.",
        "description": "Introduce checks for `msg.sender` in the function",
        "detector_name": "send-ether-no-checks",
        "instances": [
          {
            "contract_path": "src/UncheckedSend.sol",
            "line_no": 6,
            "src": "85:246",
            "src_char": "85:246"
          },
          {
            "contract_path": "src/UncheckedSend.sol",
            "line_no": 12,
            "src": "337:190",
            "src_char": "337:190"
          },
          {
            "contract_path": "src/UncheckedSend.sol",
            "line_no": 17,
            "src": "533:184",
            "src_char": "533:184"
          },
          {
            "contract_path": "src/UncheckedSend.sol",
            "line_no": 22,
            "src": "723:186",
            "src_char": "723:186"
          }
        ]
      },
      {
        "title": "RTLO character detected in file. \\u{202e}",
        "description": "Right to left override character may be misledaing and cause potential attacks by visually misordering method arguments!",
        "detector_name": "rtlo",
        "instances": [
          {
            "contract_path": "src/RTLO.sol",
            "line_no": 3,
            "src": "33:157",
            "src_char": "33:155"
          }
        ]
      },
      {
        "title": "Dangerous unary operator found in assignment.",
        "description": "Potentially mistakened `=+` for `+=` or `=-` for `-=`. Please include a space in between.",
        "detector_name": "dangerous-unary-operator",
        "instances": [
          {
            "contract_path": "src/DangerousUnaryOperator.sol",
            "line_no": 12,
            "src": "220:10",
            "src_char": "220:10"
          },
          {
            "contract_path": "src/DangerousUnaryOperator.sol",
            "line_no": 13,
            "src": "247:10",
            "src_char": "247:10"
          }
        ]
      },
      {
        "title": "Usage of variable before declaration.",
        "description": "This is a bad practice that may lead to unintended consequences. Please declare the variable before using it.",
        "detector_name": "pre-declared-local-variable-usage",
        "instances": [
          {
            "contract_path": "src/PreDeclaredVarUsage.sol",
            "line_no": 8,
            "src": "196:1",
            "src_char": "196:1"
          }
        ]
      }
    ]
  },
  "low_issues": {
    "issues": [
      {
        "title": "Unsafe ERC20 Operations should not be used",
        "description": "ERC20 functions may not behave as expected. For example: return values are not always meaningful. It is recommended to use OpenZeppelin's SafeERC20 library.",
        "detector_name": "unsafe-erc20-functions",
        "instances": [
          {
            "contract_path": "src/StateShadowing.sol",
            "line_no": 22,
            "src": "368:19",
            "src_char": "368:19"
          }
        ]
      },
      {
        "title": "Solidity pragma should be specific, not wide",
        "description": "Consider using a specific version of Solidity in your contracts instead of a wide version. For example, instead of `pragma solidity ^0.8.0;`, use `pragma solidity 0.8.0;`",
        "detector_name": "unspecific-solidity-pragma",
        "instances": [
          {
            "contract_path": "src/DangerousUnaryOperator.sol",
            "line_no": 2,
            "src": "32:23",
            "src_char": "32:23"
          },
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 1,
            "src": "0:24",
            "src_char": "0:24"
          },
          {
            "contract_path": "src/PreDeclaredVarUsage.sol",
            "line_no": 2,
            "src": "32:23",
            "src_char": "32:23"
          },
          {
            "contract_path": "src/RedundantStatements.sol",
            "line_no": 2,
            "src": "32:23",
            "src_char": "32:23"
          },
          {
            "contract_path": "src/UncheckedSend.sol",
            "line_no": 2,
            "src": "32:23",
            "src_char": "32:23"
          },
          {
            "contract_path": "src/UsingSelfdestruct.sol",
            "line_no": 2,
            "src": "32:23",
            "src_char": "32:23"
          },
          {
            "contract_path": "src/cloc/AnotherHeavilyCommentedContract.sol",
            "line_no": 6,
            "src": "46:24",
            "src_char": "46:24"
          },
          {
            "contract_path": "src/inheritance/IContractInheritance.sol",
            "line_no": 2,
            "src": "32:24",
            "src_char": "32:24"
          },
          {
            "contract_path": "src/inheritance/InheritanceBase.sol",
            "line_no": 2,
            "src": "32:23",
            "src_char": "32:23"
          },
          {
            "contract_path": "src/nested_mappings/LaterVersion.sol",
            "line_no": 2,
            "src": "36:23",
            "src_char": "36:23"
          },
          {
            "contract_path": "src/nested_mappings/NestedMappings.sol",
            "line_no": 2,
            "src": "36:24",
            "src_char": "36:24"
          }
        ]
      },
      {
        "title": "`public` functions not used internally could be marked `external`",
        "description": "Instead of marking a function as `public`, consider marking it as `external` if it is not used internally.",
        "detector_name": "useless-public-function",
        "instances": [
          {
            "contract_path": "src/cloc/AnotherHeavilyCommentedContract.sol",
            "line_no": 31,
            "src": "500:3",
            "src_char": "500:3"
          },
          {
            "contract_path": "src/cloc/AnotherHeavilyCommentedContract.sol",
            "line_no": 38,
            "src": "637:5",
            "src_char": "637:5"
          },
          {
            "contract_path": "src/cloc/AnotherHeavilyCommentedContract.sol",
            "line_no": 42,
            "src": "738:4",
            "src_char": "735:4"
          }
        ]
      },
      {
        "title": "Define and use `constant` variables instead of using literals",
        "description": "If the same constant literal value is used multiple times, create a constant state variable and reference it throughout the contract.",
        "detector_name": "constants-instead-of-literals",
        "instances": [
          {
            "contract_path": "src/DynamicArrayLengthAssignment.sol",
            "line_no": 13,
            "src": "312:3",
            "src_char": "312:3"
          },
          {
            "contract_path": "src/DynamicArrayLengthAssignment.sol",
            "line_no": 14,
            "src": "346:3",
            "src_char": "346:3"
          },
          {
            "contract_path": "src/DynamicArrayLengthAssignment.sol",
            "line_no": 17,
            "src": "457:3",
            "src_char": "457:3"
          },
          {
            "contract_path": "src/PreDeclaredVarUsage.sol",
            "line_no": 8,
            "src": "200:3",
            "src_char": "200:3"
          },
          {
            "contract_path": "src/PreDeclaredVarUsage.sol",
            "line_no": 9,
            "src": "222:3",
            "src_char": "222:3"
          }
        ]
      },
      {
        "title": "Event is missing `indexed` fields",
        "description": "Index event fields make the field more quickly accessible to off-chain tools that parse events. However, note that each index field costs extra gas during emission, so it's not necessarily best to index the maximum allowed per event (three fields). Each event should use three indexed fields if there are three or more fields, and gas usage is not particularly of concern for the events in question. If there are fewer than three fields, all of the fields should be indexed.",
        "detector_name": "unindexed-events",
        "instances": [
          {
            "contract_path": "src/inheritance/InheritanceBase.sol",
            "line_no": 7,
            "src": "150:28",
            "src_char": "150:28"
          }
        ]
      },
      {
        "title": "Empty `require()` / `revert()` statements",
        "description": "Use descriptive reason strings or custom errors for revert paths.",
        "detector_name": "require-with-string",
        "instances": [
          {
            "contract_path": "src/StateShadowing.sol",
            "line_no": 8,
            "src": "135:7",
            "src_char": "135:7"
          },
          {
            "contract_path": "src/cloc/AnotherHeavilyCommentedContract.sol",
            "line_no": 35,
            "src": "589:7",
            "src_char": "589:7"
          },
          {
            "contract_path": "src/cloc/AnotherHeavilyCommentedContract.sol",
            "line_no": 56,
            "src": "1403:7",
            "src_char": "1400:7"
          }
        ]
      },
      {
        "title": "PUSH0 is not supported by all chains",
        "description": "Solc compiler version 0.8.20 switches the default target EVM version to Shanghai, which means that the generated bytecode will include PUSH0 opcodes. Be sure to select the appropriate EVM version in case you intend to deploy on a chain other than mainnet like L2 chains that may not support PUSH0, otherwise deployment of your contracts will fail.",
        "detector_name": "push-zero-opcode",
        "instances": [
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 1,
            "src": "0:24",
            "src_char": "0:24"
          },
          {
            "contract_path": "src/cloc/AnotherHeavilyCommentedContract.sol",
            "line_no": 6,
            "src": "46:24",
            "src_char": "46:24"
          },
          {
            "contract_path": "src/inheritance/IContractInheritance.sol",
            "line_no": 2,
            "src": "32:24",
            "src_char": "32:24"
          },
          {
            "contract_path": "src/inheritance/InheritanceBase.sol",
            "line_no": 2,
            "src": "32:23",
            "src_char": "32:23"
          },
          {
            "contract_path": "src/nested_mappings/LaterVersion.sol",
            "line_no": 2,
            "src": "36:23",
            "src_char": "36:23"
          }
        ]
      },
      {
        "title": "Modifiers invoked only once can be shoe-horned into the function",
        "description": "",
        "detector_name": "useless-modifier",
        "instances": [
          {
            "contract_path": "src/StateShadowing.sol",
            "line_no": 7,
            "src": "107:74",
            "src_char": "107:74"
          }
        ]
      },
      {
        "title": "Empty Block",
        "description": "Consider removing empty blocks.",
        "detector_name": "empty-block",
        "instances": [
          {
            "contract_path": "src/UncheckedSend.sol",
            "line_no": 27,
            "src": "915:65",
            "src_char": "915:65"
          }
        ]
      },
      {
        "title": "Internal functions called only once can be inlined",
        "description": "Instead of separating the logic into a separate function, consider inlining the logic into the calling function. This can reduce the number of function calls and improve readability.",
        "detector_name": "useless-internal-function",
        "instances": [
          {
            "contract_path": "src/UncheckedSend.sol",
            "line_no": 27,
            "src": "915:65",
            "src_char": "915:65"
          }
        ]
      },
      {
        "title": "Inconsistency in declaring uint256/uint (or) int256/int variables within a contract. Use explicit size declarations (uint256 or int256).",
        "description": "Consider keeping the naming convention consistent in a given contract. Explicit size declarations are preferred (uint256, int256) over implicit ones (uint, int) to avoid confusion.",
        "detector_name": "inconsistent-type-names",
        "instances": [
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 5,
            "src": "122:12",
            "src_char": "122:12"
          },
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 7,
            "src": "197:11",
            "src_char": "197:11"
          },
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 11,
            "src": "289:10",
            "src_char": "289:10"
          },
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 12,
            "src": "340:9",
            "src_char": "340:9"
          },
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 15,
            "src": "383:9",
            "src_char": "383:9"
          },
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 16,
            "src": "434:10",
            "src_char": "434:10"
          },
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 19,
            "src": "528:12",
            "src_char": "528:12"
          },
          {
            "contract_path": "src/nested_mappings/LaterVersion.sol",
            "line_no": 8,
            "src": "184:5",
            "src_char": "184:5"
          },
          {
            "contract_path": "src/nested_mappings/NestedMappings.sol",
            "line_no": 8,
            "src": "168:10",
            "src_char": "168:10"
          }
        ]
      },
      {
        "title": "State variable modification not logged in event",
        "description": "State variable assignment not recorded in event logs, this will make it difficult for off-chain applications to track changes to state or searching historic event logs",
        "detector_name": "state-variable-not-logged-in-event-detector",
        "instances": [
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 20,
            "src": "584:27",
            "src_char": "584:27"
          },
          {
            "contract_path": "src/InconsistentUints.sol",
            "line_no": 21,
            "src": "621:33",
            "src_char": "621:33"
          }
        ]
      },
      {
        "title": "Redundant statements have no effect.",
        "description": "Remove the redundant statements because no code will be generated and it just congests the codebase.",
        "detector_name": "redundant-statements",
        "instances": [
          {
            "contract_path": "src/RedundantStatements.sol",
            "line_no": 6,
            "src": "131:4",
            "src_char": "131:4"
          },
          {
            "contract_path": "src/RedundantStatements.sol",
            "line_no": 7,
            "src": "169:4",
            "src_char": "169:4"
          },
          {
            "contract_path": "src/RedundantStatements.sol",
            "line_no": 8,
            "src": "207:27",
            "src_char": "207:27"
          },
          {
            "contract_path": "src/RedundantStatements.sol",
            "line_no": 12,
            "src": "309:4",
            "src_char": "309:4"
          },
          {
            "contract_path": "src/RedundantStatements.sol",
            "line_no": 13,
            "src": "347:6",
            "src_char": "347:6"
          },
          {
            "contract_path": "src/RedundantStatements.sol",
            "line_no": 14,
            "src": "377:4",
            "src_char": "377:4"
          }
        ]
      },
      {
        "title": "Public variables of a contract read in an external context (using `this`).",
        "description": "The contract reads it's own variable using `this` which adds an unnecessary STATICCALL. Remove `this` and access the variable like storage.",
        "detector_name": "public-variable-read-in-external-context",
        "instances": [
          {
            "contract_path": "src/PublicVariableReadInExternalContext.sol",
            "line_no": 12,
            "src": "355:14",
            "src_char": "355:14"
          },
          {
            "contract_path": "src/PublicVariableReadInExternalContext.sol",
            "line_no": 16,
            "src": "457:16",
            "src_char": "457:16"
          },
          {
            "contract_path": "src/PublicVariableReadInExternalContext.sol",
            "line_no": 20,
            "src": "553:12",
            "src_char": "553:12"
          },
          {
            "contract_path": "src/PublicVariableReadInExternalContext.sol",
            "line_no": 42,
            "src": "1175:14",
            "src_char": "1175:14"
          }
        ]
      }
    ]
  },
  "detectors_used": [
    "delegate-call-in-loop",
    "centralization-risk",
    "solmate-safe-transfer-lib",
    "avoid-abi-encode-packed",
    "ecrecover",
    "deprecated-oz-functions",
    "unsafe-erc20-functions",
    "unspecific-solidity-pragma",
    "zero-address-check",
    "useless-public-function",
    "constants-instead-of-literals",
    "unindexed-events",
    "require-with-string",
    "non-reentrant-before-others",
    "block-timestamp-deadline",
    "unsafe-oz-erc721-mint",
    "push-zero-opcode",
    "arbitrary-transfer-from",
    "useless-modifier",
    "empty-block",
    "large-numeric-literal",
    "useless-internal-function",
    "contract-with-todos",
    "inconsistent-type-names",
    "unprotected-initializer",
    "useless-error",
    "reverts-and-requires-in-loops",
    "division-before-multiplication",
    "unsafe-casting-detector",
    "enumerable-loop-removal",
    "experimental-encoder",
    "incorrect-shift-order",
    "storage-array-edit-with-memory",
    "multiple-constructors",
    "reused-contract-name",
    "nested-struct-in-mapping",
    "selfdestruct-identifier",
    "dynamic-array-length-assignment",
    "uninitialized-state-variable",
    "incorrect-caret-operator",
    "yul-return",
    "state-variable-shadowing",
    "state-variable-not-logged-in-event-detector",
    "unchecked-send",
    "misused-boolean",
    "send-ether-no-checks",
    "delegate-call-unchecked-address",
    "tautological-compare",
    "rtlo",
    "unchecked-return",
    "dangerous-unary-operator",
    "redundant-statements",
    "public-variable-read-in-external-context",
    "weak-randomness",
    "pre-declared-local-variable-usage",
    "delete-nested-mapping"
  ]
}