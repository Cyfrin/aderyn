{
  "files_summary": {
    "total_source_units": 20,
    "total_sloc": 245
  },
  "files_details": {
    "files_details": [
      {
        "file_path": "Counter.sol",
        "n_sloc": 20
      },
      {
        "file_path": "DemoASTNodes.sol",
        "n_sloc": 31
      },
      {
        "file_path": "Helper.sol",
        "n_sloc": 8
      },
      {
        "file_path": "InconsistentUints.sol",
        "n_sloc": 17
      },
      {
        "file_path": "InternalFunctions.sol",
        "n_sloc": 22
      },
      {
        "file_path": "OnceModifierExample.sol",
        "n_sloc": 8
      },
      {
        "file_path": "StateVariables.sol",
        "n_sloc": 58
      },
      {
        "file_path": "inheritance/ExtendedInheritance.sol",
        "n_sloc": 17
      },
      {
        "file_path": "inheritance/IContractInheritance.sol",
        "n_sloc": 4
      },
      {
        "file_path": "inheritance/InheritanceBase.sol",
        "n_sloc": 8
      },
      {
        "file_path": "multiple-versions/0.4/A.sol",
        "n_sloc": 5
      },
      {
        "file_path": "multiple-versions/0.4/B.sol",
        "n_sloc": 5
      },
      {
        "file_path": "multiple-versions/0.5/A.sol",
        "n_sloc": 5
      },
      {
        "file_path": "multiple-versions/0.5/B.sol",
        "n_sloc": 7
      },
      {
        "file_path": "multiple-versions/0.6/A.sol",
        "n_sloc": 5
      },
      {
        "file_path": "multiple-versions/0.6/B.sol",
        "n_sloc": 5
      },
      {
        "file_path": "multiple-versions/0.7/A.sol",
        "n_sloc": 5
      },
      {
        "file_path": "multiple-versions/0.7/B.sol",
        "n_sloc": 5
      },
      {
        "file_path": "multiple-versions/0.8/A.sol",
        "n_sloc": 5
      },
      {
        "file_path": "multiple-versions/0.8/B.sol",
        "n_sloc": 5
      }
    ]
  },
  "issue_count": {
    "high": 4,
    "low": 0
  },
  "high_issues": {
    "issues": [
      {
        "title": "Using `delegatecall` in loop",
        "description": "When calling `delegatecall` the same `msg.value` amount will be accredited multiple times.",
        "detector_name": "delegate-call-in-loop",
        "instances": [
          {
            "contract_path": "inheritance/ExtendedInheritance.sol",
            "line_no": 15,
            "src": "474:96",
            "src_char": "474:96"
          }
        ]
      },
      {
        "title": "Uninitialized State Variables",
        "description": "Solidity does initialize variables by default when you declare them, however it's good practice to explicitly declare an initial value. For example, if you transfer money to an address we must make sure that the address has been initialized.",
        "detector_name": "uninitialized-state-variable",
        "instances": [
          {
            "contract_path": "InconsistentUints.sol",
            "line_no": 7,
            "src": "197:11",
            "src_char": "197:11"
          },
          {
            "contract_path": "InconsistentUints.sol",
            "line_no": 8,
            "src": "233:14",
            "src_char": "233:14"
          },
          {
            "contract_path": "StateVariables.sol",
            "line_no": 8,
            "src": "199:19",
            "src_char": "199:19"
          },
          {
            "contract_path": "StateVariables.sol",
            "line_no": 9,
            "src": "241:20",
            "src_char": "241:20"
          },
          {
            "contract_path": "StateVariables.sol",
            "line_no": 10,
            "src": "282:18",
            "src_char": "282:18"
          }
        ]
      },
      {
        "title": "Delegatecall made by the function without checks on any adress.",
        "description": "Introduce checks on the address",
        "detector_name": "delegate-call-unchecked-address",
        "instances": [
          {
            "contract_path": "inheritance/ExtendedInheritance.sol",
            "line_no": 14,
            "src": "391:15",
            "src_char": "391:15"
          }
        ]
      },
      {
        "title": "Unchecked Low level calls",
        "description": "The return value of the low-level call is not checked, so if the call fails, the Ether will be locked in the contract. If the low level is used to prevent blocking operations, consider logging failed calls. Ensure that the return value of a low-level call is checked or logged.",
        "detector_name": "unchecked-low-level-call",
        "instances": [
          {
            "contract_path": "inheritance/ExtendedInheritance.sol",
            "line_no": 16,
            "src": "488:71",
            "src_char": "488:71"
          }
        ]
      }
    ]
  },
  "low_issues": {
    "issues": []
  },
  "detectors_used": [
    "delegate-call-in-loop",
    "avoid-abi-encode-packed",
    "block-timestamp-deadline",
    "arbitrary-transfer-from",
    "unprotected-initializer",
    "unsafe-casting-detector",
    "enumerable-loop-removal",
    "experimental-encoder",
    "incorrect-shift-order",
    "storage-array-edit-with-memory",
    "multiple-constructors",
    "reused-contract-name",
    "nested-struct-in-mapping",
    "selfdestruct-identifier",
    "dynamic-array-length-assignment",
    "uninitialized-state-variable",
    "incorrect-caret-operator",
    "yul-return",
    "state-variable-shadowing",
    "unchecked-send",
    "misused-boolean",
    "send-ether-no-checks",
    "delegate-call-unchecked-address",
    "tautological-compare",
    "rtlo",
    "unchecked-return",
    "dangerous-unary-operator",
    "tautology-or-contradiction",
    "dangerous-strict-equailty-on-contract-balance",
    "signed-storage-array",
    "weak-randomness",
    "pre-declared-local-variable-usage",
    "delete-nested-mapping",
    "tx-origin-used-for-auth",
    "msg-value-in-loop",
    "contract-locks-ether",
    "incorrect-erc721-interface",
    "incorrect-erc20-interface",
    "out-of-order-retryable",
    "constant-function-changing-state",
    "function-selector-collision",
    "unchecked-low-level-call"
  ]
}