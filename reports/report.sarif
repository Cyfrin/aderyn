{
  "$schema": "http://json.schemastore.org/sarif-2.1.0-rtm.6",
  "version": "2.1.0",
  "runs": [
    {
      "results": [
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/ExperimentalEncoder.sol"
                },
                "region": {
                  "byteLength": 33,
                  "byteOffset": 23
                }
              }
            }
          ],
          "message": {
            "text": "Experimental encoders should not be used in production. There are multiple known compiler bugs that are caused by the experimental encoder. Upgrade your solidity version to remove the need for experimental features."
          },
          "ruleId": "experimental-encoder"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/MultipleConstructorSchemes.sol"
                },
                "region": {
                  "byteLength": 180,
                  "byteOffset": 25
                }
              }
            }
          ],
          "message": {
            "text": "In some versions of Solidity, contracts compile with multiple constructors. The first constructor takes precedence. This can lead to unexpected behavior."
          },
          "ruleId": "multiple-constructors"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/nested_mappings/NestedMappings.sol"
                },
                "region": {
                  "byteLength": 58,
                  "byteOffset": 367
                }
              }
            }
          ],
          "message": {
            "text": "Prior to updates in Solidity 0.5.0, public mappings with nested structs compiled, but produced incorrect values. Refrain from using these, or update to a more recent version of Solidity."
          },
          "ruleId": "nested-struct-in-mapping"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UsingSelfdestruct.sol"
                },
                "region": {
                  "byteLength": 12,
                  "byteOffset": 146
                }
              }
            }
          ],
          "message": {
            "text": ""
          },
          "ruleId": "selfdestruct-identifier"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/DynamicArrayLengthAssignment.sol"
                },
                "region": {
                  "byteLength": 14,
                  "byteOffset": 295
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/DynamicArrayLengthAssignment.sol"
                },
                "region": {
                  "byteLength": 18,
                  "byteOffset": 325
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/DynamicArrayLengthAssignment.sol"
                },
                "region": {
                  "byteLength": 33,
                  "byteOffset": 359
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/DynamicArrayLengthAssignment.sol"
                },
                "region": {
                  "byteLength": 15,
                  "byteOffset": 408
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/DynamicArrayLengthAssignment.sol"
                },
                "region": {
                  "byteLength": 14,
                  "byteOffset": 439
                }
              }
            }
          ],
          "message": {
            "text": "If the length of a dynamic array (storage variable) directly assigned to, it may allow access to other storage slots by tweaking it's value. This practice has been depracated in newer Solidity versions"
          },
          "ruleId": "dynamic-array-length-assignment"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/InconsistentUints.sol"
                },
                "region": {
                  "byteLength": 11,
                  "byteOffset": 197
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/InconsistentUints.sol"
                },
                "region": {
                  "byteLength": 14,
                  "byteOffset": 233
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/PublicVariableReadInExternalContext.sol"
                },
                "region": {
                  "byteLength": 26,
                  "byteOffset": 130
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/StateShadowing.sol"
                },
                "region": {
                  "byteLength": 13,
                  "byteOffset": 87
                }
              }
            }
          ],
          "message": {
            "text": "Solidity does initialize variables by default when you declare them, however it's good practice to explicitly declare an initial value. For example, if you transfer money to an address we must make sure that the address has been initialized."
          },
          "ruleId": "uninitialized-state-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/StateShadowing.sol"
                },
                "region": {
                  "byteLength": 13,
                  "byteOffset": 239
                }
              }
            }
          ],
          "message": {
            "text": "Description of the high issue."
          },
          "ruleId": "state-variable-shadowing"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UncheckedSend.sol"
                },
                "region": {
                  "byteLength": 22,
                  "byteOffset": 815
                }
              }
            }
          ],
          "message": {
            "text": "The transaction `address(payable?).send(address)` may fail because of reasons like out-of-gas, invalid receipient address or revert from the recipient. Therefore, the boolean returned by this function call must be checked to be `true` in order to verify that the transaction was successful"
          },
          "ruleId": "unchecked-send"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/MisusedBoolean.sol"
                },
                "region": {
                  "byteLength": 19,
                  "byteOffset": 257
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/MisusedBoolean.sol"
                },
                "region": {
                  "byteLength": 20,
                  "byteOffset": 419
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/MisusedBoolean.sol"
                },
                "region": {
                  "byteLength": 20,
                  "byteOffset": 582
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/MisusedBoolean.sol"
                },
                "region": {
                  "byteLength": 19,
                  "byteOffset": 745
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/MisusedBoolean.sol"
                },
                "region": {
                  "byteLength": 51,
                  "byteOffset": 908
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/MisusedBoolean.sol"
                },
                "region": {
                  "byteLength": 52,
                  "byteOffset": 1060
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/MisusedBoolean.sol"
                },
                "region": {
                  "byteLength": 53,
                  "byteOffset": 1213
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/MisusedBoolean.sol"
                },
                "region": {
                  "byteLength": 21,
                  "byteOffset": 1366
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/MisusedBoolean.sol"
                },
                "region": {
                  "byteLength": 17,
                  "byteOffset": 1530
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/MisusedBoolean.sol"
                },
                "region": {
                  "byteLength": 18,
                  "byteOffset": 1691
                }
              }
            }
          ],
          "message": {
            "text": "The patterns `if (… || true)` and `if (.. && false)` will always evaluate to true and false respectively."
          },
          "ruleId": "misused-boolean"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UncheckedSend.sol"
                },
                "region": {
                  "byteLength": 246,
                  "byteOffset": 85
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UncheckedSend.sol"
                },
                "region": {
                  "byteLength": 190,
                  "byteOffset": 337
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UncheckedSend.sol"
                },
                "region": {
                  "byteLength": 184,
                  "byteOffset": 533
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UncheckedSend.sol"
                },
                "region": {
                  "byteLength": 186,
                  "byteOffset": 723
                }
              }
            }
          ],
          "message": {
            "text": "Introduce checks for `msg.sender` in the function"
          },
          "ruleId": "send-ether-no-checks"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/RTLO.sol"
                },
                "region": {
                  "byteLength": 157,
                  "byteOffset": 33
                }
              }
            }
          ],
          "message": {
            "text": "Right to left override character may be misledaing and cause potential attacks by visually misordering method arguments!"
          },
          "ruleId": "rtlo"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/DangerousUnaryOperator.sol"
                },
                "region": {
                  "byteLength": 10,
                  "byteOffset": 220
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/DangerousUnaryOperator.sol"
                },
                "region": {
                  "byteLength": 10,
                  "byteOffset": 247
                }
              }
            }
          ],
          "message": {
            "text": "Potentially mistakened `=+` for `+=` or `=-` for `-=`. Please include a space in between."
          },
          "ruleId": "dangerous-unary-operator"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/PreDeclaredVarUsage.sol"
                },
                "region": {
                  "byteLength": 1,
                  "byteOffset": 196
                }
              }
            }
          ],
          "message": {
            "text": "This is a bad practice that may lead to unintended consequences. Please declare the variable before using it."
          },
          "ruleId": "pre-declared-local-variable-usage"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/StateShadowing.sol"
                },
                "region": {
                  "byteLength": 19,
                  "byteOffset": 368
                }
              }
            }
          ],
          "message": {
            "text": "ERC20 functions may not behave as expected. For example: return values are not always meaningful. It is recommended to use OpenZeppelin's SafeERC20 library."
          },
          "ruleId": "unsafe-erc20-functions"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/DangerousUnaryOperator.sol"
                },
                "region": {
                  "byteLength": 23,
                  "byteOffset": 32
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/InconsistentUints.sol"
                },
                "region": {
                  "byteLength": 24,
                  "byteOffset": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/PreDeclaredVarUsage.sol"
                },
                "region": {
                  "byteLength": 23,
                  "byteOffset": 32
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/RedundantStatements.sol"
                },
                "region": {
                  "byteLength": 23,
                  "byteOffset": 32
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UncheckedSend.sol"
                },
                "region": {
                  "byteLength": 23,
                  "byteOffset": 32
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UsingSelfdestruct.sol"
                },
                "region": {
                  "byteLength": 23,
                  "byteOffset": 32
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cloc/AnotherHeavilyCommentedContract.sol"
                },
                "region": {
                  "byteLength": 24,
                  "byteOffset": 46
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/inheritance/IContractInheritance.sol"
                },
                "region": {
                  "byteLength": 24,
                  "byteOffset": 32
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/inheritance/InheritanceBase.sol"
                },
                "region": {
                  "byteLength": 23,
                  "byteOffset": 32
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/nested_mappings/LaterVersion.sol"
                },
                "region": {
                  "byteLength": 23,
                  "byteOffset": 36
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/nested_mappings/NestedMappings.sol"
                },
                "region": {
                  "byteLength": 24,
                  "byteOffset": 36
                }
              }
            }
          ],
          "message": {
            "text": "Consider using a specific version of Solidity in your contracts instead of a wide version. For example, instead of `pragma solidity ^0.8.0;`, use `pragma solidity 0.8.0;`"
          },
          "ruleId": "unspecific-solidity-pragma"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cloc/AnotherHeavilyCommentedContract.sol"
                },
                "region": {
                  "byteLength": 3,
                  "byteOffset": 500
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cloc/AnotherHeavilyCommentedContract.sol"
                },
                "region": {
                  "byteLength": 5,
                  "byteOffset": 637
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cloc/AnotherHeavilyCommentedContract.sol"
                },
                "region": {
                  "byteLength": 4,
                  "byteOffset": 738
                }
              }
            }
          ],
          "message": {
            "text": "Instead of marking a function as `public`, consider marking it as `external` if it is not used internally."
          },
          "ruleId": "useless-public-function"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/DynamicArrayLengthAssignment.sol"
                },
                "region": {
                  "byteLength": 3,
                  "byteOffset": 312
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/DynamicArrayLengthAssignment.sol"
                },
                "region": {
                  "byteLength": 3,
                  "byteOffset": 346
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/DynamicArrayLengthAssignment.sol"
                },
                "region": {
                  "byteLength": 3,
                  "byteOffset": 457
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/PreDeclaredVarUsage.sol"
                },
                "region": {
                  "byteLength": 3,
                  "byteOffset": 200
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/PreDeclaredVarUsage.sol"
                },
                "region": {
                  "byteLength": 3,
                  "byteOffset": 222
                }
              }
            }
          ],
          "message": {
            "text": "If the same constant literal value is used multiple times, create a constant state variable and reference it throughout the contract."
          },
          "ruleId": "constants-instead-of-literals"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/inheritance/InheritanceBase.sol"
                },
                "region": {
                  "byteLength": 28,
                  "byteOffset": 150
                }
              }
            }
          ],
          "message": {
            "text": "Index event fields make the field more quickly accessible to off-chain tools that parse events. However, note that each index field costs extra gas during emission, so it's not necessarily best to index the maximum allowed per event (three fields). Each event should use three indexed fields if there are three or more fields, and gas usage is not particularly of concern for the events in question. If there are fewer than three fields, all of the fields should be indexed."
          },
          "ruleId": "unindexed-events"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/StateShadowing.sol"
                },
                "region": {
                  "byteLength": 7,
                  "byteOffset": 135
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cloc/AnotherHeavilyCommentedContract.sol"
                },
                "region": {
                  "byteLength": 7,
                  "byteOffset": 589
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cloc/AnotherHeavilyCommentedContract.sol"
                },
                "region": {
                  "byteLength": 7,
                  "byteOffset": 1403
                }
              }
            }
          ],
          "message": {
            "text": "Use descriptive reason strings or custom errors for revert paths."
          },
          "ruleId": "require-with-string"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/InconsistentUints.sol"
                },
                "region": {
                  "byteLength": 24,
                  "byteOffset": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cloc/AnotherHeavilyCommentedContract.sol"
                },
                "region": {
                  "byteLength": 24,
                  "byteOffset": 46
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/inheritance/IContractInheritance.sol"
                },
                "region": {
                  "byteLength": 24,
                  "byteOffset": 32
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/inheritance/InheritanceBase.sol"
                },
                "region": {
                  "byteLength": 23,
                  "byteOffset": 32
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/nested_mappings/LaterVersion.sol"
                },
                "region": {
                  "byteLength": 23,
                  "byteOffset": 36
                }
              }
            }
          ],
          "message": {
            "text": "Solc compiler version 0.8.20 switches the default target EVM version to Shanghai, which means that the generated bytecode will include PUSH0 opcodes. Be sure to select the appropriate EVM version in case you intend to deploy on a chain other than mainnet like L2 chains that may not support PUSH0, otherwise deployment of your contracts will fail."
          },
          "ruleId": "push-zero-opcode"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/StateShadowing.sol"
                },
                "region": {
                  "byteLength": 74,
                  "byteOffset": 107
                }
              }
            }
          ],
          "message": {
            "text": ""
          },
          "ruleId": "useless-modifier"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UncheckedSend.sol"
                },
                "region": {
                  "byteLength": 65,
                  "byteOffset": 915
                }
              }
            }
          ],
          "message": {
            "text": "Consider removing empty blocks."
          },
          "ruleId": "empty-block"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UncheckedSend.sol"
                },
                "region": {
                  "byteLength": 65,
                  "byteOffset": 915
                }
              }
            }
          ],
          "message": {
            "text": "Instead of separating the logic into a separate function, consider inlining the logic into the calling function. This can reduce the number of function calls and improve readability."
          },
          "ruleId": "useless-internal-function"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/InconsistentUints.sol"
                },
                "region": {
                  "byteLength": 12,
                  "byteOffset": 122
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/InconsistentUints.sol"
                },
                "region": {
                  "byteLength": 11,
                  "byteOffset": 197
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/InconsistentUints.sol"
                },
                "region": {
                  "byteLength": 10,
                  "byteOffset": 289
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/InconsistentUints.sol"
                },
                "region": {
                  "byteLength": 9,
                  "byteOffset": 340
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/InconsistentUints.sol"
                },
                "region": {
                  "byteLength": 9,
                  "byteOffset": 383
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/InconsistentUints.sol"
                },
                "region": {
                  "byteLength": 10,
                  "byteOffset": 434
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/InconsistentUints.sol"
                },
                "region": {
                  "byteLength": 12,
                  "byteOffset": 528
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/nested_mappings/LaterVersion.sol"
                },
                "region": {
                  "byteLength": 5,
                  "byteOffset": 184
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/nested_mappings/NestedMappings.sol"
                },
                "region": {
                  "byteLength": 10,
                  "byteOffset": 168
                }
              }
            }
          ],
          "message": {
            "text": "Consider keeping the naming convention consistent in a given contract. Explicit size declarations are preferred (uint256, int256) over implicit ones (uint, int) to avoid confusion."
          },
          "ruleId": "inconsistent-type-names"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/InconsistentUints.sol"
                },
                "region": {
                  "byteLength": 27,
                  "byteOffset": 584
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/InconsistentUints.sol"
                },
                "region": {
                  "byteLength": 33,
                  "byteOffset": 621
                }
              }
            }
          ],
          "message": {
            "text": "State variable assignment not recorded in event logs, this will make it difficult for off-chain applications to track changes to state or searching historic event logs"
          },
          "ruleId": "state-variable-not-logged-in-event-detector"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/RedundantStatements.sol"
                },
                "region": {
                  "byteLength": 4,
                  "byteOffset": 131
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/RedundantStatements.sol"
                },
                "region": {
                  "byteLength": 4,
                  "byteOffset": 169
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/RedundantStatements.sol"
                },
                "region": {
                  "byteLength": 27,
                  "byteOffset": 207
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/RedundantStatements.sol"
                },
                "region": {
                  "byteLength": 4,
                  "byteOffset": 309
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/RedundantStatements.sol"
                },
                "region": {
                  "byteLength": 6,
                  "byteOffset": 347
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/RedundantStatements.sol"
                },
                "region": {
                  "byteLength": 4,
                  "byteOffset": 377
                }
              }
            }
          ],
          "message": {
            "text": "Remove the redundant statements because no code will be generated and it just congests the codebase."
          },
          "ruleId": "redundant-statements"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/PublicVariableReadInExternalContext.sol"
                },
                "region": {
                  "byteLength": 14,
                  "byteOffset": 355
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/PublicVariableReadInExternalContext.sol"
                },
                "region": {
                  "byteLength": 16,
                  "byteOffset": 457
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/PublicVariableReadInExternalContext.sol"
                },
                "region": {
                  "byteLength": 12,
                  "byteOffset": 553
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/PublicVariableReadInExternalContext.sol"
                },
                "region": {
                  "byteLength": 14,
                  "byteOffset": 1175
                }
              }
            }
          ],
          "message": {
            "text": "The contract reads it's own variable using `this` which adds an unnecessary STATICCALL. Remove `this` and access the variable like storage."
          },
          "ruleId": "public-variable-read-in-external-context"
        }
      ],
      "tool": {
        "driver": {
          "fullName": "Cyfrin - Aderyn",
          "informationUri": "https://github.com/Cyfrin/aderyn",
          "name": "Aderyn",
          "organization": "Cyfrin",
          "semanticVersion": "0.1.8",
          "version": "0.1.8"
        }
      }
    }
  ]
}