use std::{collections::BTreeMap, error::Error};

use aderyn_driver::context::loader::ContextLoader;
use aderyn_driver::detection_modules::capture;
use aderyn_driver::detector::{Detector, IssueSeverity};

#[derive(Default)]
pub struct {{detector_name_title_case}} {
    // Keys are source file name and line number
    found_instances: BTreeMap<(String, usize), String>,
}

impl Detector for {{detector_name_title_case}} {
    fn detect(&mut self, loader: &ContextLoader) -> Result<bool, Box<dyn Error>> {
        
        // Use the `loader` to find nodes, then capture them as shown below
        // capture!(self, loader, event_definition);
        
        Ok(!self.found_instances.is_empty())
    }

    fn title(&self) -> String {
        String::from("Title for {{ detector_name_title_case }}")
    }

    fn description(&self) -> String {
        String::from("Description for {{ detector_name_title_case }}")
    }

    fn severity(&self) -> IssueSeverity {
        // Choose the appropriate severity
        IssueSeverity::NC
    }

    fn instances(&self) -> BTreeMap<(String, usize), String> {
        self.found_instances.clone()
    }
}

#[cfg(test)]
mod {{detector_name_camel_case}}_tests {

    use crate::config_tests::tests_configuration;

    use super::{{detector_name_title_case}};

    use aderyn_driver::context::loader::ContextLoader;
    use aderyn_driver::detector::detector_test_helpers::load_contract;
    use aderyn_driver::detector::Detector;

    fn test_{{detector_name_camel_case}}_for(
        _contract_file: String,
        loader: ContextLoader,
        mut detector: impl Detector,
    ) {
        // assert that the detector finds the public function
        let found = detector.detect(&loader).unwrap();
        assert!(found);
    }

    #[test]
    fn test_{{detector_name_camel_case}}() {
        let detector = {{detector_name_title_case}}::default();
        let contracts = tests_configuration().get_contracts_for(detector.title());

        for contract_file in contracts {
            let detector = {{detector_name_title_case}}::default();
            let loader = load_contract(&contract_file);
            test_{{detector_name_camel_case}}_for(contract_file, loader, detector);
        }
    }
}
